pipeline {
    agent {
        kubernetes {
            yaml """
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: helm
                image: alpine/helm:3.11.1
                command:
                - sleep
                args:
                - 99d
              - name: kubectl
                image: bitnami/kubectl:1.25.8
                command:
                - sleep
                args:
                - 99d
              - name: tofu
                image: ghcr.io/opentofu/opentofu:1.6.0
                command:
                - sleep
                args:
                - 99d
              - name: docker
                image: docker:20.10.23-dind
                securityContext:
                  privileged: true
                volumeMounts:
                - name: docker-socket
                  mountPath: /var/run/docker.sock
              volumes:
              - name: docker-socket
                hostPath:
                  path: /var/run/docker.sock
            """
        }
    }
    
    environment {
        APP_NAME = 'sample-app'
        APP_VERSION = '1.0.0'
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_IMAGE = "${DOCKER_REGISTRY}/myorg/${APP_NAME}"
        DOCKER_TAG = "${APP_VERSION}-${BUILD_NUMBER}"
        NAMESPACE = 'applications'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Run Tests') {
            steps {
                echo "Running tests..."
                // Example test command
                sh 'echo "Running unit tests"'
                // If tests fail, the pipeline will fail
                sh 'test 0 -eq 0 || exit 1'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                container('docker') {
                    echo "Building Docker image..."
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                container('docker') {
                    echo "Pushing Docker image..."
                    withCredentials([usernamePassword(credentialsId: 'docker-registry-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker login ${DOCKER_REGISTRY} -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                        sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    }
                }
            }
        }
        
        stage('Deploy Infrastructure') {
            steps {
                container('tofu') {
                    echo "Deploying infrastructure with OpenTofu..."
                    dir('opentofu') {
                        sh 'tofu init'
                        sh 'tofu plan -out=tfplan'
                        sh 'tofu apply -auto-approve tfplan'
                    }
                }
            }
        }
        
        stage('Deploy Application') {
            steps {
                container('helm') {
                    echo "Deploying application with Helm..."
                    sh "helm upgrade --install ${APP_NAME} ./helm/${APP_NAME} --namespace ${NAMESPACE} --set image.tag=${DOCKER_TAG}"
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                container('kubectl') {
                    echo "Verifying deployment..."
                    sh "kubectl rollout status deployment/${APP_NAME} -n ${NAMESPACE}"
                    sh "kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=${APP_NAME}"
                }
            }
        }
    }
    
    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
        always {
            echo "Cleaning up..."
        }
    }
}