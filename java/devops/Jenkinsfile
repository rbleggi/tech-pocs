pipeline {
    agent any
    stages {
        stage('Prepare k3s directory') {
            steps {
                sh 'mkdir -p ./k3s'
            }
        }
        stage('Run Pipeline') {
            agent {
                docker {
                    image 'jenkins-agent:java-docker-git'
                    args '-u root -v /var/run/docker.sock:/var/run/docker.sock --privileged --add-host=k3s:host-gateway --add-host=host-gateway:host-gateway'
                }
            }

            options {
                timeout(time: 15, unit: 'MINUTES')
                disableConcurrentBuilds()
            }

            triggers {
                pollSCM('H/1 * * * *')
            }

            environment {
                DOCKER_IMAGE = 'tech-pocs/java-devops-app'
                DOCKER_TAG = "${BUILD_NUMBER}"
                WORKSPACE = "${env.WORKSPACE}/java/devops"
                KUBECONFIG_ORIGINAL = "/config/kubeconfig.yaml"
                KUBECONFIG_MODIFIED = "/config/kubeconfig-modified.yaml"
                KUBECONFIG = "${KUBECONFIG_MODIFIED}"
                HELM_CHART_PATH = "${WORKSPACE}/helm/sample-app"
                OPENTOFU_DIR = "${WORKSPACE}/opentofu"
                INFRA_NAMESPACE = "infrastructure"
                APP_NAMESPACE = "applications"
            }

            stages {
                stage('Verify Agent') {
                    steps {
                        echo "Running on agent: ${env.NODE_NAME}"
                        echo "This build is NOT running on the built-in node"
                        sh 'hostname'
                    }
                }

                stage('Checkout') {
                    steps {
                        checkout scm
                    }
                }

                stage('Test & Build') {
                    steps {
                        echo "Running Maven tests"
                        sh '''
                        cd java/devops
                        mvn clean test
                        cd ${WORKSPACE}
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} -f Dockerfile .
                        docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                        '''
                    }
                }

                stage('Kubeconfig Setup') {
                    steps {
                        sh '''
                        # Wait for kubeconfig.yaml to be generated by K3s
                        for i in {1..30}; do
                          if [ -s /config/kubeconfig.yaml ]; then
                            echo "kubeconfig.yaml found!"; break;
                          fi
                          echo "Waiting for kubeconfig.yaml to be generated..."; sleep 2;
                        done
                        sed 's|https://k3s:6443|https://host-gateway:6443|g' ${KUBECONFIG_ORIGINAL} > ${KUBECONFIG_MODIFIED}
                        yq -i '(.clusters[].cluster) |= (. + {"insecure-skip-tls-verify": true} | del(."certificate-authority-data") | del(."certificate-authority"))' ${KUBECONFIG_MODIFIED}
                        '''
                    }
                }

                stage('Provision Infra (OpenTofu)') {
                    steps {
                        sh '''
                        cd ${OPENTOFU_DIR}
                        tofu init
                        tofu import kubernetes_namespace.infrastructure infrastructure || true
                        tofu import kubernetes_namespace.applications applications || true
                        tofu validate
                        tofu plan -var="kubeconfig_path=${KUBECONFIG_MODIFIED}" -out=tfplan
                        tofu apply -auto-approve tfplan
                        '''
                    }
                }
            }

            post {
                always {
                    echo "Build completed on agent: ${env.NODE_NAME}"
                }
                success {
                    echo "Build and deployment succeeded!"
                }
                failure {
                    echo "Build or deployment failed!"
                }
            }
        }
    }
}
