pipeline {
    agent any

    options {
        timeout(time: 15, unit: 'MINUTES')
        disableConcurrentBuilds()
    }

    triggers {
        pollSCM('H/5 * * * *')
    }

    environment {
        DOCKER_IMAGE = 'tech-pocs/java-devops-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        WORKSPACE = "${env.WORKSPACE}/java/devops"
        KUBECONFIG_ORIGINAL = "${WORKSPACE}/k3s/kubeconfig.yaml"
        KUBECONFIG_MODIFIED = "${WORKSPACE}/k3s-modified/kubeconfig.yaml"
        KUBECONFIG = "${KUBECONFIG_MODIFIED}"
        HELM_CHART_PATH = "${WORKSPACE}/helm/sample-app"
        OPENTOFU_DIR = "${WORKSPACE}/opentofu"
        INFRA_NAMESPACE = "infrastructure"
        APP_NAMESPACE = "applications"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                sh 'ls -la'
            }
        }

        stage('Run Tests') {
            steps {
                echo "Running Maven tests"
                sh '''
                cd java/devops
                mvn clean test
                '''
            }
            post {
                failure {
                    echo "Tests failed! Pipeline will stop."
                    error "Test execution failed"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image"
                sh '''
                cd ${WORKSPACE}
                docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} -f Dockerfile .
                docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                '''
            }
        }

        stage('Setup Kubernetes Access') {
            steps {
                echo "Setting up access to Kubernetes cluster"
                sh '''
                mkdir -p ${WORKSPACE}/k3s-modified
                cat ${KUBECONFIG_ORIGINAL} | sed 's|https://k3s:6443|https://host-gateway:6443|g' > ${KUBECONFIG_MODIFIED}
                '''
            }
        }

        stage('OpenTofu Tests & Provision') {
            steps {
                echo "Running OpenTofu validation tests"
                sh '''
                cd ${OPENTOFU_DIR}
                cp ${KUBECONFIG} ../k3s/kubeconfig.yaml
                tofu init
                tofu import kubernetes_namespace.infrastructure infrastructure || true
                tofu import kubernetes_namespace.applications applications || true
                tofu validate
                tofu plan -var="kubeconfig_path=${KUBECONFIG}" -out=tfplan
                tofu apply -auto-approve tfplan
                '''
            }
        }
    }

    post {
        always {
            echo "Build completed on agent: ${env.NODE_NAME}"
        }
        success {
            echo "Build and deployment succeeded!"
        }
        failure {
            echo "Build or deployment failed!"
        }
    }
}
