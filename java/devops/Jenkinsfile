pipeline {
    agent {
        docker {
            image 'docker:dind'
            args '-u root -v /var/run/docker.sock:/var/run/docker.sock --privileged --add-host=k3s:host-gateway --add-host=host-gateway:host-gateway'
        }
    }

    options {
        timeout(time: 15, unit: 'MINUTES')
        disableConcurrentBuilds()
    }

    triggers {
        pollSCM('H/1 * * * *')
    }

    environment {
        DOCKER_IMAGE = 'tech-pocs/java-devops-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        WORKSPACE = "${env.WORKSPACE}/java/devops"
        KUBECONFIG_ORIGINAL = "${WORKSPACE}/k3s/kubeconfig.yaml"
        KUBECONFIG_MODIFIED = "${WORKSPACE}/k3s-modified/kubeconfig.yaml"
        KUBECONFIG = "${KUBECONFIG_MODIFIED}"
        HELM_CHART_PATH = "${WORKSPACE}/helm/sample-app"
        OPENTOFU_DIR = "${WORKSPACE}/opentofu"
        INFRA_NAMESPACE = "infrastructure"
        APP_NAMESPACE = "applications"
    }

    stages {
        stage('Install Tools') {
            steps {
                echo "Installing required tools"
                sh '''
                # Install required tools in Alpine Linux
                apk update
                apk add --no-cache bash curl maven openjdk21 git

                # Set Java home
                export JAVA_HOME=/usr/lib/jvm/java-21-openjdk
                export PATH=$JAVA_HOME/bin:$PATH

                # Install kubectl
                curl -LO "https://dl.k8s.io/release/stable.txt"
                KUBECTL_VERSION=$(cat stable.txt)
                curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
                chmod +x kubectl
                mv kubectl /usr/local/bin/

                # Install Helm
                curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
                chmod 700 get_helm.sh
                ./get_helm.sh

                # Install OpenTofu
                curl -L -o opentofu.zip https://github.com/opentofu/opentofu/releases/download/v1.6.0/tofu_1.6.0_linux_amd64.zip
                # Use -o flag to overwrite files without prompting
                unzip -o opentofu.zip
                chmod +x tofu
                mv tofu /usr/local/bin/
                rm -f opentofu.zip

                # Verify installations
                java -version
                mvn --version
                docker --version
                git --version
                kubectl version --client
                helm version
                tofu version
                '''
            }
        }

        stage('Verify Agent') {
            steps {
                echo "Running on agent: ${env.NODE_NAME}"
                echo "This build is NOT running on the built-in node"
                sh 'hostname'
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Test & Build') {
            steps {
                echo "Running Maven tests"
                sh '''
                cd java/devops
                mvn clean test
                cd ${WORKSPACE}
                docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} -f Dockerfile .
                docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                '''
            }
        }

        stage('Kubeconfig Setup') {
            steps {
                sh '''
                mkdir -p ${WORKSPACE}/k3s-modified
                sed 's|https://k3s:6443|https://host-gateway:6443|g' ${KUBECONFIG_ORIGINAL} > ${KUBECONFIG_MODIFIED}
                cp ${KUBECONFIG_MODIFIED} ${WORKSPACE}/k3s/kubeconfig.yaml
                '''
            }
        }

        stage('Provision Infra (OpenTofu)') {
            steps {
                sh '''
                cd ${OPENTOFU_DIR}
                tofu init
                tofu import kubernetes_namespace.infrastructure infrastructure || true
                tofu import kubernetes_namespace.applications applications || true
                tofu validate
                tofu plan -var="kubeconfig_path=/config/kubeconfig.yaml" -out=tfplan
                tofu apply -auto-approve tfplan
                '''
            }
        }
    }

    post {
        always {
            echo "Build completed on agent: ${env.NODE_NAME}"
        }
        success {
            echo "Build and deployment succeeded!"
        }
        failure {
            echo "Build or deployment failed!"
        }
    }
}
